---
title: "gotta-catch-them-all"
author: "Tasmiah Tahera Aziz"
format: html
execute: 
  echo: false
  warning: false
editor: visual
---

## GOTTA CATCH THEM ALL

## Introduction

Pokémon are fascinating creatures. While every Pokémon is unique, many share similarities in their statistics and characteristics, often aligned with their primary type. In this document, I explored and compared Pokémon stats using summary tables, regression analysis, and visualizations. I utilized the `gtsummary` and `ggplot2` libraries in R to perform this analysis, along with a custom function to calculate the median.

```{r}

#Reading in and saving the pokemon dataset using {here} and {readr} package
library(here)
library(readr)

pokemon_df <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/refs/heads/main/data/2025/2025-04-01/pokemon_df.csv')

write_rds(pokemon_df, here("data", "pokemon_df.rds"))

#Adding Capitalized Text Columns
library(stringr)
library(dplyr)
pokemon_df_cap <- mutate(
	pokemon_df,
	pokemon_cap = str_to_title(pokemon),
	type_1_cap = str_to_title(type_1),
	type_2_cap = str_to_title(type_2),
	egg_group_1_cap = str_to_title(egg_group_1),
	egg_group_2_cap = str_to_title(egg_group_2)
)

#saving the new pokemon dataset named pokemon_df_cap
write_rds(pokemon_df_cap, here("data", "pokemon_df_cap.rds"))


```

## Descriptive Statistics by Pokémon Type

@tbl-des summarizes key attributes such as height, weight, base experience, and combat stats, grouped by the primary type. There are `r length(unique(pokemon_df_cap$type_1_cap))` different primary Pokémon types represented in the dataset.

```{r}
#| label: tbl-des
#| tbl-cap: "Descriptive statistics by primary type"

#Creating a {gtsummary} table of descriptive statistics
library(gtsummary)
tbl_des <- tbl_summary(pokemon_df_cap,
						by = type_1_cap,
						include = c(height, weight, base_experience, hp,
												attack, defense, special_attack, special_defense,
												speed),
						label = list(
							height ~ "Height",
							weight ~ "Weight",
							base_experience ~ "Base Experience",
							hp ~ "Hit Points",
							attack ~ "Attack Points",
							defense ~ "Defence Points",
							special_attack ~ "Special Attack Points",
							special_defense ~ "Special Defence Points",
							speed ~ "Speed"
						),
						missing_text = "Missing") |>
	add_p(test = all_continuous() ~ "kruskal.test") |>
	bold_labels()

tbl_des
```

The **Kruskal-Wallis test** is used to assess whether the differences in distributions across types are statistically significant.

## Regression Analysis

To examine how **hit points (HP)**, **attack**, and **defense** predict **base experience**, I have fitted a simple linear regression model.

```{r}
#Fiting the linear model

linear_model <- lm(base_experience ~ hp + attack + defense, data = pokemon_df_cap)

# Summary of the model
summary(linear_model)
```

### Regression Table

@tbl-reg provides estimates of the effect of each variable on base experience, helping us understand which characteristics are more influential. It summarizes the linear regression model predicting Pokémon base experience based on HP, Attack, and Defense.

```{r}
#| label: tbl-reg
#| tbl-cap: "Linear Regression Summary"

#Creating a formatted regression table
tbl_lm <- tbl_uvregression(
	pokemon_df_cap,
	y = base_experience,
	include = c(hp, attack, defense),
	method = lm,
	label = list(
		hp = "HP",
		attack = "Attack",
		defense = "Defense")
) |>
	bold_labels()

tbl_lm
```

## Data Visualization

@fig-hpvsbase depicts a scatter plot to visualize the relationship between HP and base experience, colored by Pokémon primary type.

```{r}
#| label: fig-hpvsbase
#| fig-cap: "HP vs Base Experience by Pokémon Type"

#Creating a figure using {ggplot2}
library(ggplot2)
ggplot(pokemon_df_cap, aes(x = hp, y = base_experience, color = type_1_cap)) +
	geom_point() +
	labs(
		title = "HP vs Base Experience by Pokémon Type",
		x = "HP (Hit Points)",
		y = "Base Experience",
		color = "Primary Type"
	) +
	theme_minimal() +
	theme(
		plot.title = element_text(face = "bold", hjust = 0.5),
		legend.position = "bottom"
	)
```

This plot provides a clear visual of how HP correlates with base experience across different types.

## Custom Function: Median Calculation

Below is the implementation of a custom function to calculate the median of a numeric vector without using the built-in `median()` function.

```{r}
#| echo: TRUE
#Writing a function for median

new_median <- function(x) {
	# Removing NA values
	x <- x[!is.na(x)]
	# Sorting the data
	x <- sort(x)
	n <- length(x)
	# If even number of values
	if (n %% 2 == 0) {
		median_val <- (x[n/2] + x[n/2 + 1]) / 2
	} else {
		# If odd number of values
		median_val <- x[(n + 1) / 2]
	}
	return(median_val)
}

```

## Utilizing the Custom Function

To demonstrate the utility of the custom function `new_median()`, I applied it to the `speed` column from the Pokémon dataset.

```{r}
#Applying the custom median function to the 'speed' column
new_median(pokemon_df_cap$speed)
```

So, the median Pokémon speed is `r new_median(pokemon_df_cap$speed)`.
